#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุงุฎุชุจุงุฑ ููุงุฆู ูุฅุตูุงุญ ุชุฎุทูุท ูููุงุช ุงูุทูุงุจ ุจุงุณุชุฎุฏุงู ุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
"""

import sys
import os
from pathlib import Path

# ุฅุถุงูุฉ ูุณุงุฑ ุงููุดุฑูุน
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

import sqlite3
import logging
from core.pdf.student_id_generator import generate_student_ids_pdf
from datetime import datetime

def get_sample_students():
    """ุงูุญุตูู ุนูู ุนููุฉ ูู ุงูุทูุงุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    try:
        db_path = project_root / "private_schools.db"
        if not db_path.exists():
            print("โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุบูุฑ ููุฌูุฏุฉ")
            return None
            
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # ุฌูุจ ุนููุฉ ูู ุงูุทูุงุจ
        query = """
        SELECT id, name, grade, school_id, 
               (SELECT name FROM schools WHERE id = students.school_id) as school_name
        FROM students 
        ORDER BY id 
        LIMIT 12
        """
        
        cursor.execute(query)
        rows = cursor.fetchall()
        
        students = []
        for row in rows:
            student = {
                'id': row[0],
                'name': row[1] or f"ุทุงูุจ ุฑูู {row[0]}",
                'grade': row[2] or "ุบูุฑ ูุญุฏุฏ",
                'school_id': row[3],
                'school_name': row[4] or "ูุฏุฑุณุฉ ุงูุงุฎุชุจุงุฑ"
            }
            students.append(student)
        
        conn.close()
        return students
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงูุจูุงูุงุช: {e}")
        return None

def create_test_pdf_with_real_data():
    """ุฅูุดุงุก PDF ูููููุงุช ุจุงุณุชุฎุฏุงู ุจูุงูุงุช ุญููููุฉ"""
    print("=== ุงุฎุชุจุงุฑ ูุน ุจูุงูุงุช ุญููููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ===")
    
    students = get_sample_students()
    
    if not students:
        print("ุณูุชู ุงุณุชุฎุฏุงู ุจูุงูุงุช ุงุฎุชุจุงุฑ ุจุฏูุงู ูู ุฐูู...")
        # ุจูุงูุงุช ุงุฎุชุจุงุฑ ุงุญุชูุงุทูุฉ
        students = []
        arabic_names = [
            "ุฃุญูุฏ ูุญูุฏ ุนูู", "ูุงุทูุฉ ุญุณู ูุญููุฏ", "ูุญูุฏ ุนุจุฏุงููู ุฃุญูุฏ",
            "ููุฑ ุงููุฏู ุตุงูุญ", "ุนูุงุฑ ุทุงุฑู ุญุณูู", "ุฒููุจ ุนูู ุญุณุงู",
            "ููุณู ุฅุจุฑุงููู ูุญูุฏ", "ูุฑูู ุนุงุฏู ุตุงูุญ", "ุญุณุงู ุงูุฏูู ุฃุญูุฏ",
            "ุณุงุฑุฉ ูุญููุฏ ุนูู", "ุนุจุฏุงูุฑุญูู ุญุณู", "ูููู ูุญูุฏ ุญุณูู"
        ]
        
        grades = [
            "ุงูุฃูู ุงูุงุจุชุฏุงุฆู", "ุงูุซุงูู ุงูุงุจุชุฏุงุฆู", "ุงูุซุงูุซ ุงูุงุจุชุฏุงุฆู",
            "ุงูุฑุงุจุน ุงูุงุจุชุฏุงุฆู", "ุงูุฎุงูุณ ุงูุงุจุชุฏุงุฆู", "ุงูุณุงุฏุณ ุงูุงุจุชุฏุงุฆู"
        ]
        
        for i, name in enumerate(arabic_names):
            student = {
                'id': i + 1,
                'name': name,
                'grade': grades[i % len(grades)],
                'school_name': "ูุฏุฑุณุฉ ุงูููุฑ ุงูุฃูููุฉ"
            }
            students.append(student)
    
    print(f"๐ ุนุฏุฏ ุงูุทูุงุจ: {len(students)}")
    
    # ุฅูุดุงุก ุงุณู ููู ูุฑูุฏ
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = project_root / f"student_ids_fixed_{timestamp}.pdf"
    
    print(f"๐ ุฅูุดุงุก ููู: {output_file.name}")
    
    # ุฅูุดุงุก PDF
    school_name = students[0].get('school_name', 'ูุฏุฑุณุฉ ุงูุงุฎุชุจุงุฑ') if students else 'ูุฏุฑุณุฉ ุงูุงุฎุชุจุงุฑ'
    
    result = generate_student_ids_pdf(
        students,
        str(output_file),
        school_name,
        "ูููุฉ ุทุงูุจ"
    )
    
    if result:
        print(f"โ ุชู ุฅูุดุงุก ุงูููู ุจูุฌุงุญ!")
        print(f"๐ ุญุฌู ุงูููู: {output_file.stat().st_size / 1024:.2f} KB")
        print(f"๐ ุนุฏุฏ ุงูุตูุญุงุช ุงููุชููุน: {(len(students) + 7) // 8}")  # 8 ูููุงุช ููู ุตูุญุฉ
        
        # ุนุฑุถ ูุงุฆูุฉ ุจุงูุทูุงุจ ุงูููุถูููู
        print("\n๐ ุงูุทูุงุจ ุงูููุถูููู:")
        for i, student in enumerate(students, 1):
            print(f"  {i:2d}. {student['name']} - {student['grade']}")
        
        # ูุญุงููุฉ ูุชุญ ุงูููู
        try:
            os.startfile(str(output_file))
            print(f"\n๐ ุชู ูุชุญ ุงูููู ูููุนุงููุฉ")
        except Exception as e:
            print(f"\n๐ ููููู ูุชุญ ุงูููู ูุฏููุงู: {output_file}")
            
        return True
    else:
        print("โ ูุดู ูู ุฅูุดุงุก ุงูููู")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("ุงุฎุชุจุงุฑ ููุงุฆู ูุฅุตูุงุญ ุชุฎุทูุท ูููุงุช ุงูุทูุงุจ")
    print("=" * 50)
    
    # ุชุนููู ูุณุชูู ุงูููู
    logging.basicConfig(level=logging.INFO)
    
    success = create_test_pdf_with_real_data()
    
    print("\n" + "=" * 50)
    if success:
        print("โ ุชู ุฅุตูุงุญ ูุดููุฉ ุชุฎุทูุท ูููุงุช ุงูุทูุงุจ ุจูุฌุงุญ!")
        print("๐ ุงูุชุญุณููุงุช ุงูููุทุจูุฉ:")
        print("   - ุชูููู ุนุฏุฏ ุงูุจุทุงูุงุช ููู ุตูุญุฉ ูู 10 ุฅูู 8")
        print("   - ุฅุตูุงุญ ุญุณุงุจ ููุงุถุน ุงูุจุทุงูุงุช")
        print("   - ุถุจุท ุงูููุงูุด ูุงููุณุงูุงุช")
        print("   - ุฅุถุงูุฉ ุงูุชุญูู ูู ุญุฏูุฏ ุงูุตูุญุฉ")
    else:
        print("โ ููุงู ูุดููุฉ ูุง ุชุฒุงู ุชุญุชุงุฌ ุฅูู ุญู")

if __name__ == "__main__":
    main()
