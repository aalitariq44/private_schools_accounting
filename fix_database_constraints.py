#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุฅุตูุงุญ ูุดุงูู ูููุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
ูุฐุง ุงูุณูุฑูุจุช ุณูุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ ููุนูุฏ ุฅูุดุงุกูุง ูุน ุฅุตูุงุญ ุงููุดุงูู
"""

import sys
import os
from pathlib import Path
import logging

# ุฅุถุงูุฉ ุงููุณุงุฑ ุงูุฌุฐุฑ ูููุดุฑูุน
sys.path.insert(0, str(Path(__file__).parent))

import config
from core.database.connection import DatabaseManager

# ุฅุนุฏุงุฏ ูุธุงู ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def delete_existing_database():
    """ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ"""
    try:
        if config.DATABASE_PATH.exists():
            config.DATABASE_PATH.unlink()
            logging.info(f"ุชู ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ: {config.DATABASE_PATH}")
            return True
        else:
            logging.info("ูุง ุชูุฌุฏ ูุงุนุฏุฉ ุจูุงูุงุช ููุฌูุฏุฉ ููุญุฐู")
            return True
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        return False

def create_fixed_database():
    """ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ ูุน ุฅุตูุงุญ ุงููุดุงูู"""
    try:
        # ุฅูุดุงุก ูุฏูุฑ ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏ
        db_manager = DatabaseManager()
        
        # ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        success = db_manager.initialize_database()
        
        if success:
            logging.info("ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ ุจูุฌุงุญ")
            
            # ุงูุชุญูู ูู ุงูุฌุฏุงูู ุงูููุดุฃุฉ
            with db_manager.get_cursor() as cursor:
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                logging.info("ุงูุฌุฏุงูู ุงูููุดุฃุฉ:")
                for table in tables:
                    logging.info(f"  - {table[0]}")
                    
                # ุงูุชุญูู ูู ูููู ุฌุฏุงูู external_income ู expenses
                for table_name in ['external_income', 'expenses']:
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    logging.info(f"\nูููู ุฌุฏูู {table_name}:")
                    for col in columns:
                        logging.info(f"  - {col[1]} {col[2]} {'NOT NULL' if col[3] else ''} {'PRIMARY KEY' if col[5] else ''}")
            
            return True
        else:
            logging.error("ูุดู ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช")
            return False
            
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ: {e}")
        return False

def create_default_school():
    """ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ ูุถูุงู ูุฌูุฏ school_id ุตุงูุญ"""
    try:
        db_manager = DatabaseManager()
        
        # ุงูุชุญูู ูู ูุฌูุฏ ูุฏุงุฑุณ
        with db_manager.get_cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM schools")
            school_count = cursor.fetchone()[0]
            
            if school_count == 0:
                # ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ
                cursor.execute("""
                    INSERT INTO schools (name_ar, name_en, school_types, address, phone)
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    "ุงููุฏุฑุณุฉ ุงูุงูุชุฑุงุถูุฉ",
                    "Default School", 
                    "ุฌููุน ุงููุฑุงุญู",
                    "ุงูุนููุงู ุงูุงูุชุฑุงุถู",
                    "0000000000"
                ))
                
                school_id = cursor.lastrowid
                logging.info(f"ุชู ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ ุจุฑูู: {school_id}")
                return school_id
            else:
                # ุงูุญุตูู ุนูู ุฃูู ูุฏุฑุณุฉ ููุฌูุฏุฉ
                cursor.execute("SELECT id FROM schools LIMIT 1")
                school_id = cursor.fetchone()[0]
                logging.info(f"ุชูุฌุฏ ูุฏุฑุณุฉ ุจุฑูู: {school_id}")
                return school_id
                
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงููุฏุฑุณุฉ ุงูุงูุชุฑุงุถูุฉ: {e}")
        return None

def create_default_user():
    """ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู"""
    try:
        db_manager = DatabaseManager()
        
        with db_manager.get_cursor() as cursor:
            # ุงูุชุญูู ูู ูุฌูุฏ ูุณุชุฎุฏููู
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
            
            if user_count == 0:
                # ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู
                import hashlib
                password = "admin123"
                password_hash = hashlib.sha256(password.encode()).hexdigest()
                
                cursor.execute("""
                    INSERT INTO users (username, password)
                    VALUES (?, ?)
                """, ("admin", password_hash))
                
                logging.info("ุชู ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู: admin / admin123")
                return True
            else:
                logging.info("ููุฌุฏ ูุณุชุฎุฏููู ูู ุงููุธุงู")
                return True
                
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู: {e}")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ง ุฅุตูุงุญ ูุดุงูู ูููุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช")
    print("=" * 50)
    
    # ุงูุฎุทูุฉ 1: ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ
    print("๐๏ธ  ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ...")
    if not delete_existing_database():
        print("โ ูุดู ูู ุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ")
        return False
    
    # ุงูุฎุทูุฉ 2: ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ
    print("๐๏ธ  ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ...")
    if not create_fixed_database():
        print("โ ูุดู ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ")
        return False
    
    # ุงูุฎุทูุฉ 3: ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ
    print("๐ซ ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ...")
    school_id = create_default_school()
    if school_id is None:
        print("โ ูุดู ูู ุฅูุดุงุก ุงููุฏุฑุณุฉ ุงูุงูุชุฑุงุถูุฉ")
        return False
    
    # ุงูุฎุทูุฉ 4: ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู
    print("๐ค ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู...")
    if not create_default_user():
        print("โ ูุดู ูู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู")
        return False
    
    print("\nโ ุชู ุฅุตูุงุญ ุฌููุน ูุดุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
    print("๐ ููุฎุต ุงูุฅุตูุงุญุงุช:")
    print(f"   - ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ ูู: {config.DATABASE_PATH}")
    print(f"   - ุชู ุฅูุดุงุก ูุฏุฑุณุฉ ุงูุชุฑุงุถูุฉ ุจุฑูู: {school_id}")
    print("   - ุชู ุฅูุดุงุก ูุณุชุฎุฏู ุงูุชุฑุงุถู: admin / admin123")
    print("\n๐ฏ ููููู ุงูุขู ุชุดุบูู ุงูุชุทุจูู ุจุฏูู ูุดุงูู ูู ูููุฏ ุงูุจูุงูุงุช")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nโจ ุงูุนูููุฉ ููุชููุฉ ุจูุฌุงุญ!")
        else:
            print("\n๐ฅ ูุดูุช ุงูุนูููุฉ!")
            sys.exit(1)
    except Exception as e:
        logging.error(f"ุฎุทุฃ ุนุงู ูู ุงูุนูููุฉ: {e}")
        print(f"\n๐ฅ ุฎุทุฃ ุนุงู: {e}")
        sys.exit(1)
