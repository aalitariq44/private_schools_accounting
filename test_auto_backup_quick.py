#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุงุฎุชุจุงุฑ ุณุฑูุน ููููุฒุฉ ุงูุฌุฏูุฏุฉ - ุงููุณุฎ ุงูุงุญุชูุงุทู ุงูุชููุงุฆู ุนูุฏ ุงูุฎุฑูุฌ
ุงุฎุชุจุงุฑ ูุญูู ุจุฏูู ุฑูุน ุนูู Supabase
"""

import sys
from pathlib import Path

# ุฅุถุงูุฉ ุงููุฌูุฏ ุงูุฑุฆูุณู ููุชุทุจูู ุฅูู ุงููุณุงุฑ
sys.path.insert(0, str(Path(__file__).parent))

import config

def test_config_values():
    """ุงุฎุชุจุงุฑ ููู ุงูุฅุนุฏุงุฏุงุช ุงูุฌุฏูุฏุฉ"""
    print("๐งช ุงุฎุชุจุงุฑ ุฅุนุฏุงุฏุงุช ุงููุณุฎ ุงูุงุญุชูุงุทู ุงูุชููุงุฆู...")
    
    # ุงูุชุญูู ูู ูุฌูุฏ ุงูุฅุนุฏุงุฏุงุช ุงูุฌุฏูุฏุฉ
    assert hasattr(config, 'AUTO_BACKUP_ON_EXIT'), "ุฅุนุฏุงุฏ AUTO_BACKUP_ON_EXIT ุบูุฑ ููุฌูุฏ"
    assert hasattr(config, 'AUTO_BACKUP_SHOW_SUCCESS_MESSAGE'), "ุฅุนุฏุงุฏ AUTO_BACKUP_SHOW_SUCCESS_MESSAGE ุบูุฑ ููุฌูุฏ" 
    assert hasattr(config, 'AUTO_BACKUP_CONFIRMATION_DIALOG'), "ุฅุนุฏุงุฏ AUTO_BACKUP_CONFIRMATION_DIALOG ุบูุฑ ููุฌูุฏ"
    
    print(f"โ AUTO_BACKUP_ON_EXIT: {config.AUTO_BACKUP_ON_EXIT}")
    print(f"โ AUTO_BACKUP_SHOW_SUCCESS_MESSAGE: {config.AUTO_BACKUP_SHOW_SUCCESS_MESSAGE}")
    print(f"โ AUTO_BACKUP_CONFIRMATION_DIALOG: {config.AUTO_BACKUP_CONFIRMATION_DIALOG}")
    
    return True

def test_main_window_functions():
    """ุงุฎุชุจุงุฑ ุฏูุงู ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐งช ุงุฎุชุจุงุฑ ุฏูุงู ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ...")
    
    try:
        # ุงุณุชูุฑุงุฏ ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ
        from app.main_window import MainWindow
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุฏูุงู ุงููุทููุจุฉ ุจุฏูู ุฅูุดุงุก ูุงุฆู
        import inspect
        
        # ุงูุญุตูู ุนูู ุฃุนุถุงุก ุงูููุงุณ
        methods = [name for name, method in inspect.getmembers(MainWindow, predicate=inspect.isfunction)]
        
        required_methods = ['create_quick_backup', 'create_auto_backup_on_exit', 'closeEvent']
        
        for method_name in required_methods:
            if method_name in methods:
                print(f"โ ุฏุงูุฉ {method_name} ููุฌูุฏุฉ")
            else:
                print(f"โ ุฏุงูุฉ {method_name} ุบูุฑ ููุฌูุฏุฉ")
                return False
        
        return True
        
    except ImportError as e:
        print(f"โ ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ: {e}")
        return False
    except Exception as e:
        print(f"โ ุฎุทุฃ ุนุงู: {e}")
        return False

def test_code_integration():
    """ุงุฎุชุจุงุฑ ุงูุชูุงูู ูู ุงูููุฏ"""
    print("๐งช ุงุฎุชุจุงุฑ ุงูุชูุงูู ูู ุงูููุฏ...")
    
    try:
        # ูุฑุงุกุฉ ููู main_window.py ูุงูุชุญูู ูู ูุฌูุฏ ุงูููุฏ ุงููุทููุจ
        main_window_file = Path(__file__).parent / "app" / "main_window.py"
        
        if not main_window_file.exists():
            print("โ ููู main_window.py ุบูุฑ ููุฌูุฏ")
            return False
        
        with open(main_window_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุฏูุงู ูุงูููุฏ ุงููุทููุจ
        required_code = [
            "def create_auto_backup_on_exit(self):",
            "def closeEvent(self, event):",
            "config.AUTO_BACKUP_ON_EXIT",
            "ูุณุฎุฉ ุงุญุชูุงุทูุฉ ุชููุงุฆูุฉ ุนูุฏ ุงูุฎุฑูุฌ",
            "backup auto-exit"
        ]
        
        for code_snippet in required_code:
            if code_snippet in content:
                print(f"โ ุงูููุฏ ููุฌูุฏ: {code_snippet}")
            else:
                print(f"โ ุงูููุฏ ุบูุฑ ููุฌูุฏ: {code_snippet}")
                return False
        
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูููู: {e}")
        return False

def test_different_config_scenarios():
    """ุงุฎุชุจุงุฑ ุณููุงุฑูููุงุช ูุฎุชููุฉ ููุฅุนุฏุงุฏุงุช"""
    print("๐งช ุงุฎุชุจุงุฑ ุณููุงุฑูููุงุช ูุฎุชููุฉ ููุฅุนุฏุงุฏุงุช...")
    
    # ุญูุธ ุงูููู ุงูุฃุตููุฉ
    original_values = {
        'AUTO_BACKUP_ON_EXIT': config.AUTO_BACKUP_ON_EXIT,
        'AUTO_BACKUP_SHOW_SUCCESS_MESSAGE': config.AUTO_BACKUP_SHOW_SUCCESS_MESSAGE,
        'AUTO_BACKUP_CONFIRMATION_DIALOG': config.AUTO_BACKUP_CONFIRMATION_DIALOG
    }
    
    # ุณููุงุฑูููุงุช ุงูุงุฎุชุจุงุฑ
    test_scenarios = [
        {
            'name': 'ุงููุณุฎ ููุนู ุจุงููุงูู',
            'AUTO_BACKUP_ON_EXIT': True,
            'AUTO_BACKUP_SHOW_SUCCESS_MESSAGE': True,
            'AUTO_BACKUP_CONFIRMATION_DIALOG': True
        },
        {
            'name': 'ุงููุณุฎ ููุนู ุตุงูุช',
            'AUTO_BACKUP_ON_EXIT': True,
            'AUTO_BACKUP_SHOW_SUCCESS_MESSAGE': False,
            'AUTO_BACKUP_CONFIRMATION_DIALOG': False
        },
        {
            'name': 'ุงููุณุฎ ูุนุทู',
            'AUTO_BACKUP_ON_EXIT': False,
            'AUTO_BACKUP_SHOW_SUCCESS_MESSAGE': False,
            'AUTO_BACKUP_CONFIRMATION_DIALOG': False
        }
    ]
    
    for scenario in test_scenarios:
        print(f"   ๐ ุงุฎุชุจุงุฑ: {scenario['name']}")
        
        # ุชุทุจูู ุงูููู
        config.AUTO_BACKUP_ON_EXIT = scenario['AUTO_BACKUP_ON_EXIT']
        config.AUTO_BACKUP_SHOW_SUCCESS_MESSAGE = scenario['AUTO_BACKUP_SHOW_SUCCESS_MESSAGE']
        config.AUTO_BACKUP_CONFIRMATION_DIALOG = scenario['AUTO_BACKUP_CONFIRMATION_DIALOG']
        
        # ุงูุชุญูู ูู ุงูุชุทุจูู
        assert config.AUTO_BACKUP_ON_EXIT == scenario['AUTO_BACKUP_ON_EXIT']
        assert config.AUTO_BACKUP_SHOW_SUCCESS_MESSAGE == scenario['AUTO_BACKUP_SHOW_SUCCESS_MESSAGE']
        assert config.AUTO_BACKUP_CONFIRMATION_DIALOG == scenario['AUTO_BACKUP_CONFIRMATION_DIALOG']
        
        print(f"      โ ุชู ุชุทุจูู ูุชุฃููุฏ ุงูุณููุงุฑูู")
    
    # ุงุณุชุฑุฌุงุน ุงูููู ุงูุฃุตููุฉ
    config.AUTO_BACKUP_ON_EXIT = original_values['AUTO_BACKUP_ON_EXIT']
    config.AUTO_BACKUP_SHOW_SUCCESS_MESSAGE = original_values['AUTO_BACKUP_SHOW_SUCCESS_MESSAGE']
    config.AUTO_BACKUP_CONFIRMATION_DIALOG = original_values['AUTO_BACKUP_CONFIRMATION_DIALOG']
    
    print("   โ ุชู ุงุณุชุฑุฌุงุน ุงูููู ุงูุฃุตููุฉ")
    return True

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุงุฎุชุจุงุฑ"""
    print("๐ ุจุฏุก ุงูุงุฎุชุจุงุฑ ุงูุณุฑูุน ูููุฒุฉ ุงููุณุฎ ุงูุงุญุชูุงุทู ุงูุชููุงุฆู ุนูุฏ ุงูุฎุฑูุฌ\n")
    
    tests = [
        ("ุงุฎุชุจุงุฑ ุฅุนุฏุงุฏุงุช config.py", test_config_values),
        ("ุงุฎุชุจุงุฑ ุฏูุงู ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ", test_main_window_functions),
        ("ุงุฎุชุจุงุฑ ุงูุชูุงูู ูู ุงูููุฏ", test_code_integration),
        ("ุงุฎุชุจุงุฑ ุณููุงุฑูููุงุช ูุฎุชููุฉ", test_different_config_scenarios)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"{'='*50}")
        print(f"๐งช {test_name}")
        print(f"{'='*50}")
        
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                print(f"โ {test_name}: ูุฌุญ\n")
            else:
                print(f"โ {test_name}: ูุดู\n")
                
        except Exception as e:
            print(f"๐ฅ ุฎุทุฃ ูู {test_name}: {e}\n")
            results.append((test_name, False))
    
    # ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ
    print(f"{'='*50}")
    print("๐ ููุฎุต ุงููุชุงุฆุฌ")
    print(f"{'='*50}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "โ ูุฌุญ" if result else "โ ูุดู"
        print(f"{status} - {test_name}")
    
    print(f"\n๐ ุงููุชูุฌุฉ: {passed}/{total} ุงุฎุชุจุงุฑุงุช ูุฌุญุช")
    
    if passed == total:
        print("\n๐ ุชู ุชูููุฐ ุงูููุฒุฉ ุจูุฌุงุญ!")
        print("\n๐ ููุฎุต ุงูููุฒุฉ ุงูุฌุฏูุฏุฉ:")
        print("   ๐ ุงููุณุฎ ุงูุงุญุชูุงุทู ุงูุชููุงุฆู ุนูุฏ ุฅุบูุงู ุงูุชุทุจูู")
        print("   โ๏ธ ุฅุนุฏุงุฏุงุช ูุงุจูุฉ ููุชุฎุตูุต ูู config.py")
        print("   ๐ก๏ธ ูุนุงูุฌุฉ ุฐููุฉ ููุฃุฎุทุงุก")
        print("   ๐ค ูุงุฌูุฉ ูุณุชุฎุฏู ูุงุถุญุฉ")
        print("\n๐ฏ ููููุฉ ุงูุงุณุชุฎุฏุงู:")
        print("   1. ูู ุจุชุดุบูู ุงูุชุทุจูู")
        print("   2. ุนูุฏ ุงูุฎุฑูุฌ ุณูุชู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ุชููุงุฆูุฉ")
        print("   3. ูููู ุชุฎุตูุต ุงูุฅุนุฏุงุฏุงุช ูู config.py")
        print("\nโจ ุงูููุฒุฉ ุฌุงูุฒุฉ ููุงุณุชุฎุฏุงู!")
    else:
        print(f"\nโ {total - passed} ุงุฎุชุจุงุฑุงุช ูุดูุช. ูุฑุฌู ูุฑุงุฌุนุฉ ุงูุฃุฎุทุงุก.")
        return False
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nโน๏ธ ุชู ุฅููุงู ุงูุงุฎุชุจุงุฑ")
        sys.exit(0)
    except Exception as e:
        print(f"\n๐ฅ ุฎุทุฃ ุนุงู: {e}")
        sys.exit(1)
